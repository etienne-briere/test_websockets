import asyncio
import websockets # Module permettant de cr√©er un serveur WebSocket pour envoyer les donn√©es √† Unity
from bleak import BleakClient, BleakScanner
from functools import partial
import os

PORT = int(os.environ.get("PORT", 8765))  # Port d√©fini par Render

# Adresse MAC/Bluetooth du Polar H10 (√† remplacer par la tienne)
HEART_RATE_UUID = "00002a37-0000-1000-8000-00805f9b34fb"  # UUID standard du capteur cardiaque

# Liste des clients WebSocket connect√©s
clients = set() # Liste des clients WebSocket connect√©s (Unity va s‚Äôy connecter)

async def connect_polar_h10():
    # Scan des appareils ble disponibles
    print("üîç Scan des p√©riph√©riques BLE...")
    devices = await BleakScanner.discover()

    polar_device_found = False

    for device in devices:
        if not polar_device_found:
            print(f"Nom: {device.name}, Adresse: {device.address}")  # address = UUID de l'appareil ble

        # Chercher appareil Polar parmi ceux disponibles
        if device.name is not None and "Polar" in device.name:
            polar_device_found = True

            async with BleakClient(device) as client:
                print(f"‚úÖ Connected to {device.name}, {device.address}")

                def callback(sender, data):
                    heart_rate = data[1]
                    print(f"üíìHR: {heart_rate} BPM")

                    asyncio.create_task(send_data_to_clients(heart_rate)) # envoie la valeur du rythme cardiaque aux clients WebSocket (Unity)

                await client.start_notify(HEART_RATE_UUID, callback) # Demande √† recevoir les notifs du Polar H10 et d‚Äôex√©cuter callback() √† chaque nouvelle donn√©e
                # Boucle infini
                while True:
                    await asyncio.sleep(1) # attendre 1sec entre chaque boucle

    if not polar_device_found:
        print("‚ùå No Polar device found")


async def send_data_to_clients(heart_rate):
    """Fonction asynchrone qui envoie la FC aux clients connect√©s"""
    if not clients:  # V√©rifie si au moins un client est connect√©
        print("‚ùå Aucun client WebSocket connect√© !")
        return  # Ne fait rien si aucun client n'est connect√©

    print("‚úÖ Client WebSocket d√©tect√©, envoi des donn√©es...")
    message = str(heart_rate)
    #message = str(heart_rate).encode('utf-8')  # encode le message en bytes
    print(f"üì§ Envoi de la FC : {message}")  # V√©rifie que Python envoie bien la FC
    await asyncio.gather(*[client.send(message) for client in clients])  # Envoie la FC √† tous les clients connect√©s


async def websocket_handler(websocket, path):
    """G√®re la connexion avec Unity"""
    clients.add(websocket)
    #print("üîó Unity connect√© au WebSocket")
    print(f"üîó Unity connect√© (nombre total de clients : {len(clients)})")
    try:
        async for message in websocket:
            print(f"üì© Message re√ßu depuis Unity : {message}")
    except websockets.ConnectionClosed as e:
        print(f"‚ö†Ô∏è Unity s'est d√©connect√© : {e}") # ne marche pas
    finally:
        clients.remove(websocket)
        print("üî¥ WebSocket d√©connect√©")


async def main(): # Fonction principale qui d√©marre tout le syst√®me
    # D√©marre un serveur WebSocket sur localhost:8765
    #websocket_server = await websockets.serve(websocket_handler, "localhost", 8765)
    websocket_server = await websockets.serve(partial(websocket_handler, path="/"), "0.0.0.0", PORT)
    await asyncio.gather(websocket_server.wait_closed(), connect_polar_h10())


asyncio.run(main())



